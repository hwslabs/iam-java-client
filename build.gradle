import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'com.diffplug.spotless'
apply plugin: 'org.openapi.generator'

group = 'com.hypto'

buildscript {
    repositories {
        mavenCentral()
        maven { url "https://repo1.maven.org/maven2" }
    }
    dependencies {
        classpath "org.openapitools:openapi-generator-gradle-plugin:6.0.1"
        classpath 'com.android.tools.build:gradle:2.3.+'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'
        classpath 'com.diffplug.spotless:spotless-plugin-gradle:6.3.0'
    }
}

repositories {
    mavenCentral()
}
sourceSets {
    main.java.srcDirs = ['src/main/java']
}

if(hasProperty('target') && target == 'android') {

    apply plugin: 'com.android.library'
    apply plugin: 'com.github.dcendents.android-maven'

    android {
        compileSdkVersion 25
        buildToolsVersion '25.0.2'
        defaultConfig {
            minSdkVersion 14
            targetSdkVersion 25
        }
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }

        // Rename the aar correctly
        libraryVariants.all { variant ->
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith('.aar')) {
                    def fileName = "${project.name}-${variant.baseName}-${version}.aar"
                    output.outputFile = new File(outputFile.parent, fileName)
                }
            }
        }

        dependencies {
            provided "jakarta.annotation:jakarta.annotation-api:$jakarta_annotation_version"
        }
    }

    afterEvaluate {
        android.libraryVariants.all { variant ->
            def task = project.tasks.create "jar${variant.name.capitalize()}", Jar
            task.description = "Create jar artifact for ${variant.name}"
            task.dependsOn variant.javaCompile
            task.from variant.javaCompile.destinationDir
            task.destinationDir = project.file("${project.buildDir}/outputs/jar")
            task.archiveName = "${project.name}-${variant.baseName}-${version}.jar"
            artifacts.add('archives', task);
        }
    }

    task sourcesJar(type: Jar) {
        from android.sourceSets.main.java.srcDirs
        classifier = 'sources'
    }

    artifacts {
        archives sourcesJar
    }

} else {

    apply plugin: 'java'
    apply plugin: 'maven-publish'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    publishing {
        publications {
            maven(MavenPublication) {
                artifactId = 'iam-java-client'
                from components.java
            }
        }
    }

    task execute(type:JavaExec) {
        main = System.getProperty('mainClass')
        classpath = sourceSets.main.runtimeClasspath
    }
}

ext {
    jakarta_annotation_version = "1.3.5"
    casbin_version = "1.22.1"
}

dependencies {
    implementation 'io.swagger:swagger-annotations:1.6.5'
    implementation "com.google.code.findbugs:jsr305:3.0.2"
    implementation 'com.squareup.okhttp3:okhttp:4.9.3'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.3'
    implementation 'com.google.code.gson:gson:2.9.0'
    implementation 'io.gsonfire:gson-fire:1.8.5'
    implementation 'javax.ws.rs:jsr311-api:1.1.1'
    implementation 'javax.ws.rs:javax.ws.rs-api:2.1.1'
    implementation 'org.openapitools:jackson-databind-nullable:0.2.3'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
    implementation "jakarta.annotation:jakarta.annotation-api:$jakarta_annotation_version"

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    // Uncomment the next line if you want to use RSASSA-PSS (PS256, PS384, PS512) algorithms:
    //    runtimeOnly 'org.bouncycastle:bcprov-jdk15on:1.60'
    runtimeOnly 'io.jsonwebtoken:jjwt-gson:0.11.5' // or 'io.jsonwebtoken:jjwt-jackson:0.11.2' for gson

    // Casbin
    implementation("org.casbin:jcasbin:$casbin_version") // Policy management


    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.8.0'
    testImplementation 'org.powermock:powermock-api-mockito2:1.7.0RC2'
    testImplementation 'org.powermock:powermock-module-junit4:1.7.0'
}

javadoc {
    options.tags = [ "http.response.details:a:Http Response Details" ]
}

// Use spotless plugin to automatically format code, remove unused import, etc
// To apply changes directly to the file, run `gradlew spotlessApply`
// Ref: https://github.com/diffplug/spotless/tree/main/plugin-gradle
spotless {
    // comment out below to run spotless as part of the `check` task
    enforceCheck false

    format 'misc', {
        // define the files (e.g. '*.gradle', '*.md') to apply `misc` to
        target '.gitignore'

        // define the steps to apply to those files
        trimTrailingWhitespace()
        indentWithSpaces() // Takes an integer argument if you don't like 4
        endWithNewline()
    }
    java {
        // don't need to set target, it is inferred from java

        // apply a specific flavor of google-java-format
        googleJavaFormat('1.8').aosp().reflowLongStrings()

        removeUnusedImports()
        importOrder()
    }
}

task deleteFiles {
    new File('.openapi-generator/FILES').eachLine {
        def file = new File("$rootDir/$it")
        if (file.exists()) {
            file.delete()
        }
    }
}


task generateClient(dependsOn: [deleteFiles], type: GenerateTask) {
    generatorName = "java"
    inputSpec = "$rootDir/iam_openapi_spec.yml".toString()
    outputDir = "$rootDir".toString()
    groupId = "com.hypto"
    id = "iam-java-client"
    invokerPackage = "com.hypto.iam.client"
    modelPackage = "com.hypto.iam.client.model"
    apiPackage = "com.hypto.iam.client.api"
    generateModelTests = false
    generateApiTests = false
    configOptions = [
            hideGenerationTimestamp : "true",
            dateLibrary: "java8",

            artifactDescription: "IAM Java Client",
            artifactUrl: "https://github.com/hwslabs/iam-java-client",
            scmConnection: "scm:git:git@github.com:hwslabs/iam-java-client.git",
            scmDeveloperConnection: "scm:git:git@github.com:hwslabs/iam-java-client.git",
            scmUrl: "https://github.com/hwslabs/iam-java-client.git"
    ]
}

compileJava.dependsOn deleteFiles, generateClient
